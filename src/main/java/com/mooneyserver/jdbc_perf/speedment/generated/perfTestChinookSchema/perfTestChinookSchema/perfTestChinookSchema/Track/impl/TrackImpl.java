package com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Track.impl;

import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Album.Album;
import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Genre.Genre;
import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.MediaType.MediaType;
import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Track.Track;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the Table
 * 'perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Track'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class TrackImpl extends AbstractBaseEntity<Track> implements Track {
    
    private Integer trackId;
    private String name;
    private Integer albumId;
    private Integer mediaTypeId;
    private Integer genreId;
    private String composer;
    private Integer milliseconds;
    private Integer bytes;
    private BigDecimal unitPrice;
    
    TrackImpl(Speedment speedment) {
        super(speedment);
    }
    
    public TrackImpl(Speedment speedment, final Track track) {
        super(speedment);
        setTrackId(track.getTrackId());
        setName(track.getName());
        track.getAlbumId().ifPresent(this::setAlbumId);
        setMediaTypeId(track.getMediaTypeId());
        track.getGenreId().ifPresent(this::setGenreId);
        track.getComposer().ifPresent(this::setComposer);
        setMilliseconds(track.getMilliseconds());
        track.getBytes().ifPresent(this::setBytes);
        setUnitPrice(track.getUnitPrice());
    }
    
    @Override
    public Integer getTrackId() {
        return trackId;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public Optional<Integer> getAlbumId() {
        return Optional.ofNullable(albumId);
    }
    
    @Override
    public Integer getMediaTypeId() {
        return mediaTypeId;
    }
    
    @Override
    public Optional<Integer> getGenreId() {
        return Optional.ofNullable(genreId);
    }
    
    @Override
    public Optional<String> getComposer() {
        return Optional.ofNullable(composer);
    }
    
    @Override
    public Integer getMilliseconds() {
        return milliseconds;
    }
    
    @Override
    public Optional<Integer> getBytes() {
        return Optional.ofNullable(bytes);
    }
    
    @Override
    public BigDecimal getUnitPrice() {
        return unitPrice;
    }
    
    @Override
    public final TrackImpl setTrackId(Integer trackId) {
        this.trackId = trackId;
        return this;
    }
    
    @Override
    public final TrackImpl setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public final TrackImpl setAlbumId(Integer albumId) {
        this.albumId = albumId;
        return this;
    }
    
    @Override
    public final TrackImpl setMediaTypeId(Integer mediaTypeId) {
        this.mediaTypeId = mediaTypeId;
        return this;
    }
    
    @Override
    public final TrackImpl setGenreId(Integer genreId) {
        this.genreId = genreId;
        return this;
    }
    
    @Override
    public final TrackImpl setComposer(String composer) {
        this.composer = composer;
        return this;
    }
    
    @Override
    public final TrackImpl setMilliseconds(Integer milliseconds) {
        this.milliseconds = milliseconds;
        return this;
    }
    
    @Override
    public final TrackImpl setBytes(Integer bytes) {
        this.bytes = bytes;
        return this;
    }
    
    @Override
    public final TrackImpl setUnitPrice(BigDecimal unitPrice) {
        this.unitPrice = unitPrice;
        return this;
    }
    
    @Override
    public Optional<Album> findAlbumId() {
        return getAlbumId()
            .flatMap(album -> managerOf_(Album.class).stream()
                .filter(Album.ALBUMID.equal(album))
                .findAny()
            );
    }
    
    @Override
    public Optional<Genre> findGenreId() {
        return getGenreId()
            .flatMap(genre -> managerOf_(Genre.class).stream()
                .filter(Genre.GENREID.equal(genre))
                .findAny()
            );
    }
    
    @Override
    public MediaType findMediaTypeId() {
        return managerOf_(MediaType.class).stream()
            .filter(MediaType.MEDIATYPEID.equal(getMediaTypeId()))
            .findAny().orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. MediaType is set to " + getMediaTypeId()
                ));
            
    }
    
    @Override
    public Track copy() {
        return new TrackImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("trackId = "+Objects.toString(getTrackId()));
        sj.add("name = "+Objects.toString(getName()));
        sj.add("albumId = "+Objects.toString(getAlbumId().orElse(null)));
        sj.add("mediaTypeId = "+Objects.toString(getMediaTypeId()));
        sj.add("genreId = "+Objects.toString(getGenreId().orElse(null)));
        sj.add("composer = "+Objects.toString(getComposer().orElse(null)));
        sj.add("milliseconds = "+Objects.toString(getMilliseconds()));
        sj.add("bytes = "+Objects.toString(getBytes().orElse(null)));
        sj.add("unitPrice = "+Objects.toString(getUnitPrice()));
        return "TrackImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Track)) { return false; }
        @SuppressWarnings("unchecked")
        final Track thatTrack = (Track)that;
        if (!Objects.equals(this.getTrackId(), thatTrack.getTrackId())) {return false; }
        if (!Objects.equals(this.getName(), thatTrack.getName())) {return false; }
        if (!Objects.equals(this.getAlbumId(), thatTrack.getAlbumId())) {return false; }
        if (!Objects.equals(this.getMediaTypeId(), thatTrack.getMediaTypeId())) {return false; }
        if (!Objects.equals(this.getGenreId(), thatTrack.getGenreId())) {return false; }
        if (!Objects.equals(this.getComposer(), thatTrack.getComposer())) {return false; }
        if (!Objects.equals(this.getMilliseconds(), thatTrack.getMilliseconds())) {return false; }
        if (!Objects.equals(this.getBytes(), thatTrack.getBytes())) {return false; }
        if (!Objects.equals(this.getUnitPrice(), thatTrack.getUnitPrice())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getTrackId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getAlbumId());
        hash = 31 * hash + Objects.hashCode(getMediaTypeId());
        hash = 31 * hash + Objects.hashCode(getGenreId());
        hash = 31 * hash + Objects.hashCode(getComposer());
        hash = 31 * hash + Objects.hashCode(getMilliseconds());
        hash = 31 * hash + Objects.hashCode(getBytes());
        hash = 31 * hash + Objects.hashCode(getUnitPrice());
        return hash;
    }
    
    @Override
    public Class<Track> getEntityClass_() {
        return Track.class;
    }
}