package com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.schema_version;

import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.sql.Timestamp;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table
 * 'perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.schema_version'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface SchemaVersion extends Entity<SchemaVersion> {
    
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getVersionRank()} method.
     */
    public final static ComparableField<SchemaVersion, Integer> VERSIONRANK = new ComparableFieldImpl<>("version_rank", SchemaVersion::getVersionRank, SchemaVersion::setVersionRank);
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getInstalledRank()} method.
     */
    public final static ComparableField<SchemaVersion, Integer> INSTALLEDRANK = new ComparableFieldImpl<>("installed_rank", SchemaVersion::getInstalledRank, SchemaVersion::setInstalledRank);
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getVersion()} method.
     */
    public final static StringField<SchemaVersion> VERSION = new StringFieldImpl<>("version", SchemaVersion::getVersion, SchemaVersion::setVersion);
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getDescription()} method.
     */
    public final static StringField<SchemaVersion> DESCRIPTION = new StringFieldImpl<>("description", SchemaVersion::getDescription, SchemaVersion::setDescription);
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getType()} method.
     */
    public final static StringField<SchemaVersion> TYPE = new StringFieldImpl<>("type", SchemaVersion::getType, SchemaVersion::setType);
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getScript()} method.
     */
    public final static StringField<SchemaVersion> SCRIPT = new StringFieldImpl<>("script", SchemaVersion::getScript, SchemaVersion::setScript);
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getChecksum()} method.
     */
    public final static ComparableField<SchemaVersion, Integer> CHECKSUM = new ComparableFieldImpl<>("checksum", o -> o.getChecksum().orElse(null), SchemaVersion::setChecksum);
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getInstalledBy()} method.
     */
    public final static StringField<SchemaVersion> INSTALLEDBY = new StringFieldImpl<>("installed_by", SchemaVersion::getInstalledBy, SchemaVersion::setInstalledBy);
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getInstalledOn()} method.
     */
    public final static ComparableField<SchemaVersion, Timestamp> INSTALLEDON = new ComparableFieldImpl<>("installed_on", SchemaVersion::getInstalledOn, SchemaVersion::setInstalledOn);
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getExecutionTime()} method.
     */
    public final static ComparableField<SchemaVersion, Integer> EXECUTIONTIME = new ComparableFieldImpl<>("execution_time", SchemaVersion::getExecutionTime, SchemaVersion::setExecutionTime);
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getSuccess()} method.
     */
    public final static ComparableField<SchemaVersion, Integer> SUCCESS = new ComparableFieldImpl<>("success", SchemaVersion::getSuccess, SchemaVersion::setSuccess);
    
    /**
     * Returns the versionRank of this SchemaVersion. The versionRank field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.version_rank.
     * 
     * @return the versionRank of this SchemaVersion
     */
    Integer getVersionRank();
    
    /**
     * Returns the installedRank of this SchemaVersion. The installedRank field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.installed_rank.
     * 
     * @return the installedRank of this SchemaVersion
     */
    Integer getInstalledRank();
    
    /**
     * Returns the version of this SchemaVersion. The version field corresponds
     * to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.version.
     * 
     * @return the version of this SchemaVersion
     */
    String getVersion();
    
    /**
     * Returns the description of this SchemaVersion. The description field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.description.
     * 
     * @return the description of this SchemaVersion
     */
    String getDescription();
    
    /**
     * Returns the type of this SchemaVersion. The type field corresponds to the
     * database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.type.
     * 
     * @return the type of this SchemaVersion
     */
    String getType();
    
    /**
     * Returns the script of this SchemaVersion. The script field corresponds to
     * the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.script.
     * 
     * @return the script of this SchemaVersion
     */
    String getScript();
    
    /**
     * Returns the checksum of this SchemaVersion. The checksum field corresponds
     * to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.checksum.
     * 
     * @return the checksum of this SchemaVersion
     */
    Optional<Integer> getChecksum();
    
    /**
     * Returns the installedBy of this SchemaVersion. The installedBy field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.installed_by.
     * 
     * @return the installedBy of this SchemaVersion
     */
    String getInstalledBy();
    
    /**
     * Returns the installedOn of this SchemaVersion. The installedOn field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.installed_on.
     * 
     * @return the installedOn of this SchemaVersion
     */
    Timestamp getInstalledOn();
    
    /**
     * Returns the executionTime of this SchemaVersion. The executionTime field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.execution_time.
     * 
     * @return the executionTime of this SchemaVersion
     */
    Integer getExecutionTime();
    
    /**
     * Returns the success of this SchemaVersion. The success field corresponds
     * to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.success.
     * 
     * @return the success of this SchemaVersion
     */
    Integer getSuccess();
    
    /**
     * Sets the versionRank of this SchemaVersion. The versionRank field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.version_rank.
     * 
     * @param versionRank to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setVersionRank(Integer versionRank);
    
    /**
     * Sets the installedRank of this SchemaVersion. The installedRank field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.installed_rank.
     * 
     * @param installedRank to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setInstalledRank(Integer installedRank);
    
    /**
     * Sets the version of this SchemaVersion. The version field corresponds to
     * the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.version.
     * 
     * @param version to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setVersion(String version);
    
    /**
     * Sets the description of this SchemaVersion. The description field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.description.
     * 
     * @param description to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setDescription(String description);
    
    /**
     * Sets the type of this SchemaVersion. The type field corresponds to the
     * database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.type.
     * 
     * @param type to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setType(String type);
    
    /**
     * Sets the script of this SchemaVersion. The script field corresponds to the
     * database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.script.
     * 
     * @param script to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setScript(String script);
    
    /**
     * Sets the checksum of this SchemaVersion. The checksum field corresponds to
     * the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.checksum.
     * 
     * @param checksum to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setChecksum(Integer checksum);
    
    /**
     * Sets the installedBy of this SchemaVersion. The installedBy field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.installed_by.
     * 
     * @param installedBy to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setInstalledBy(String installedBy);
    
    /**
     * Sets the installedOn of this SchemaVersion. The installedOn field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.installed_on.
     * 
     * @param installedOn to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setInstalledOn(Timestamp installedOn);
    
    /**
     * Sets the executionTime of this SchemaVersion. The executionTime field
     * corresponds to the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.execution_time.
     * 
     * @param executionTime to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setExecutionTime(Integer executionTime);
    
    /**
     * Sets the success of this SchemaVersion. The success field corresponds to
     * the database column
     * perfTestChinookSchema.perfTestChinookSchema.schema_version.success.
     * 
     * @param success to set of this SchemaVersion
     * @return this SchemaVersion instance
     */
    SchemaVersion setSuccess(Integer success);
}