package com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.schema_version.impl;

import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.schema_version.SchemaVersion;
import com.speedment.Speedment;
import com.speedment.component.ProjectComponent;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.TimestampIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the Table
 * 'perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.schema_version'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class SchemaVersionManagerImpl extends AbstractSqlManager<SchemaVersion> {
    
    private final TypeMapper<Integer, Integer> versionRankTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> installedRankTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> versionTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> descriptionTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> typeTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> scriptTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> checksumTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> installedByTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Timestamp, Timestamp> installedOnTypeMapper = new TimestampIdentityMapper();
    private final TypeMapper<Integer, Integer> executionTimeTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> successTypeMapper = new IntegerIdentityMapper();
    
    public SchemaVersionManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<SchemaVersion> getEntityClass() {
        return SchemaVersion.class;
    }
    
    @Override
    public Object get(SchemaVersion entity, Column column) {
        switch (column.getName()) {
            case "version_rank" : return entity.getVersionRank();
            case "installed_rank" : return entity.getInstalledRank();
            case "version" : return entity.getVersion();
            case "description" : return entity.getDescription();
            case "type" : return entity.getType();
            case "script" : return entity.getScript();
            case "checksum" : return entity.getChecksum();
            case "installed_by" : return entity.getInstalledBy();
            case "installed_on" : return entity.getInstalledOn();
            case "execution_time" : return entity.getExecutionTime();
            case "success" : return entity.getSuccess();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(SchemaVersion entity, Column column, Object value) {
        switch (column.getName()) {
            case "version_rank" : entity.setVersionRank((Integer) value); break;
            case "installed_rank" : entity.setInstalledRank((Integer) value); break;
            case "version" : entity.setVersion((String) value); break;
            case "description" : entity.setDescription((String) value); break;
            case "type" : entity.setType((String) value); break;
            case "script" : entity.setScript((String) value); break;
            case "checksum" : entity.setChecksum((Integer) value); break;
            case "installed_by" : entity.setInstalledBy((String) value); break;
            case "installed_on" : entity.setInstalledOn((Timestamp) value); break;
            case "execution_time" : entity.setExecutionTime((Integer) value); break;
            case "success" : entity.setSuccess((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.get(ProjectComponent.class).getProject().findTableByName("perfTestChinookSchema.perfTestChinookSchema.schema_version");
    }
    
    protected SchemaVersion defaultReadEntity(ResultSet resultSet) {
        final SchemaVersion entity = newInstance();
        try {
            entity.setVersionRank(versionRankTypeMapper.toJavaType(resultSet.getInt("version_rank")));
            entity.setInstalledRank(installedRankTypeMapper.toJavaType(resultSet.getInt("installed_rank")));
            entity.setVersion(versionTypeMapper.toJavaType(resultSet.getString("version")));
            entity.setDescription(descriptionTypeMapper.toJavaType(resultSet.getString("description")));
            entity.setType(typeTypeMapper.toJavaType(resultSet.getString("type")));
            entity.setScript(scriptTypeMapper.toJavaType(resultSet.getString("script")));
            entity.setChecksum(checksumTypeMapper.toJavaType(getInt(resultSet, "checksum")));
            entity.setInstalledBy(installedByTypeMapper.toJavaType(resultSet.getString("installed_by")));
            entity.setInstalledOn(installedOnTypeMapper.toJavaType(resultSet.getTimestamp("installed_on")));
            entity.setExecutionTime(executionTimeTypeMapper.toJavaType(resultSet.getInt("execution_time")));
            entity.setSuccess(successTypeMapper.toJavaType(resultSet.getInt("success")));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public SchemaVersion newInstance() {
        return new SchemaVersionImpl(speedment);
    }
    
    @Override
    public String primaryKeyFor(SchemaVersion entity) {
        return entity.getVersion();
    }
}