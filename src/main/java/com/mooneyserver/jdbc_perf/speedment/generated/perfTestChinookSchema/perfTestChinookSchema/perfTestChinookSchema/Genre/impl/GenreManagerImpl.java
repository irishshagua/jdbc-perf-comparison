package com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Genre.impl;

import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Genre.Genre;
import com.speedment.Speedment;
import com.speedment.component.ProjectComponent;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the Table
 * 'perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Genre'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class GenreManagerImpl extends AbstractSqlManager<Genre> {
    
    private final TypeMapper<Integer, Integer> genreIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> nameTypeMapper = new StringIdentityMapper();
    
    public GenreManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Genre> getEntityClass() {
        return Genre.class;
    }
    
    @Override
    public Object get(Genre entity, Column column) {
        switch (column.getName()) {
            case "GenreId" : return entity.getGenreId();
            case "Name" : return entity.getName();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Genre entity, Column column, Object value) {
        switch (column.getName()) {
            case "GenreId" : entity.setGenreId((Integer) value); break;
            case "Name" : entity.setName((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.get(ProjectComponent.class).getProject().findTableByName("perfTestChinookSchema.perfTestChinookSchema.Genre");
    }
    
    protected Genre defaultReadEntity(ResultSet resultSet) {
        final Genre entity = newInstance();
        try {
            entity.setGenreId(genreIdTypeMapper.toJavaType(resultSet.getInt("GenreId")));
            entity.setName(nameTypeMapper.toJavaType(resultSet.getString("Name")));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Genre newInstance() {
        return new GenreImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Genre entity) {
        return entity.getGenreId();
    }
}