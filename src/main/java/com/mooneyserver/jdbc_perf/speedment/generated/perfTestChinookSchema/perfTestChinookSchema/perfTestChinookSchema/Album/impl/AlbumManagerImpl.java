package com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Album.impl;

import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Album.Album;
import com.speedment.Speedment;
import com.speedment.component.ProjectComponent;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the Table
 * 'perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Album'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class AlbumManagerImpl extends AbstractSqlManager<Album> {
    
    private final TypeMapper<Integer, Integer> albumIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> titleTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> artistIdTypeMapper = new IntegerIdentityMapper();
    
    public AlbumManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Album> getEntityClass() {
        return Album.class;
    }
    
    @Override
    public Object get(Album entity, Column column) {
        switch (column.getName()) {
            case "AlbumId" : return entity.getAlbumId();
            case "Title" : return entity.getTitle();
            case "ArtistId" : return entity.getArtistId();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Album entity, Column column, Object value) {
        switch (column.getName()) {
            case "AlbumId" : entity.setAlbumId((Integer) value); break;
            case "Title" : entity.setTitle((String) value); break;
            case "ArtistId" : entity.setArtistId((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.get(ProjectComponent.class).getProject().findTableByName("perfTestChinookSchema.perfTestChinookSchema.Album");
    }
    
    protected Album defaultReadEntity(ResultSet resultSet) {
        final Album entity = newInstance();
        try {
            entity.setAlbumId(albumIdTypeMapper.toJavaType(resultSet.getInt("AlbumId")));
            entity.setTitle(titleTypeMapper.toJavaType(resultSet.getString("Title")));
            entity.setArtistId(artistIdTypeMapper.toJavaType(resultSet.getInt("ArtistId")));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Album newInstance() {
        return new AlbumImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Album entity) {
        return entity.getAlbumId();
    }
}