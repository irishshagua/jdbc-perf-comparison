package com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Genre;

import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Track.Track;
import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.util.Optional;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table
 * 'perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Genre'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface Genre extends Entity<Genre> {
    
    /**
     * This Field corresponds to the {@link Genre} field that can be obtained
     * using the {@link Genre#getGenreId()} method.
     */
    public final static ComparableField<Genre, Integer> GENREID = new ComparableFieldImpl<>("GenreId", Genre::getGenreId, Genre::setGenreId);
    /**
     * This Field corresponds to the {@link Genre} field that can be obtained
     * using the {@link Genre#getName()} method.
     */
    public final static StringField<Genre> NAME = new StringFieldImpl<>("Name", o -> o.getName().orElse(null), Genre::setName);
    
    /**
     * Returns the genreId of this Genre. The genreId field corresponds to the
     * database column perfTestChinookSchema.perfTestChinookSchema.Genre.GenreId.
     * 
     * @return the genreId of this Genre
     */
    Integer getGenreId();
    
    /**
     * Returns the name of this Genre. The name field corresponds to the database
     * column perfTestChinookSchema.perfTestChinookSchema.Genre.Name.
     * 
     * @return the name of this Genre
     */
    Optional<String> getName();
    
    /**
     * Sets the genreId of this Genre. The genreId field corresponds to the
     * database column perfTestChinookSchema.perfTestChinookSchema.Genre.GenreId.
     * 
     * @param genreId to set of this Genre
     * @return this Genre instance
     */
    Genre setGenreId(Integer genreId);
    
    /**
     * Sets the name of this Genre. The name field corresponds to the database
     * column perfTestChinookSchema.perfTestChinookSchema.Genre.Name.
     * 
     * @param name to set of this Genre
     * @return this Genre instance
     */
    Genre setName(String name);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Track} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Track#getGenreId()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Track} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Track#getGenreId()}
     */
    Stream<Track> findTracksByGenreId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Track} Entities that references this Entity by a foreign key. The order of
     * the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Track} Entities
     * that references this Entity by a foreign key
     */
    Stream<Track> findTracks();
}