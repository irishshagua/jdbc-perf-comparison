package com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Artist.impl;

import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Album.Album;
import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Artist.Artist;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the Table
 * 'perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Artist'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class ArtistImpl extends AbstractBaseEntity<Artist> implements Artist {
    
    private Integer artistId;
    private String name;
    
    ArtistImpl(Speedment speedment) {
        super(speedment);
    }
    
    public ArtistImpl(Speedment speedment, final Artist artist) {
        super(speedment);
        setArtistId(artist.getArtistId());
        artist.getName().ifPresent(this::setName);
    }
    
    @Override
    public Integer getArtistId() {
        return artistId;
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public final ArtistImpl setArtistId(Integer artistId) {
        this.artistId = artistId;
        return this;
    }
    
    @Override
    public final ArtistImpl setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Stream<Album> findAlbumsByArtistId() {
        return managerOf_(Album.class)
                .stream().filter(Album.ARTISTID.equal(this.getArtistId()));
    }
    
    @Override
    public Stream<Album> findAlbums() {
        return findAlbumsByArtistId();
    }
    
    @Override
    public Artist copy() {
        return new ArtistImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("artistId = "+Objects.toString(getArtistId()));
        sj.add("name = "+Objects.toString(getName().orElse(null)));
        return "ArtistImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Artist)) { return false; }
        @SuppressWarnings("unchecked")
        final Artist thatArtist = (Artist)that;
        if (!Objects.equals(this.getArtistId(), thatArtist.getArtistId())) {return false; }
        if (!Objects.equals(this.getName(), thatArtist.getName())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getArtistId());
        hash = 31 * hash + Objects.hashCode(getName());
        return hash;
    }
    
    @Override
    public Class<Artist> getEntityClass_() {
        return Artist.class;
    }
}