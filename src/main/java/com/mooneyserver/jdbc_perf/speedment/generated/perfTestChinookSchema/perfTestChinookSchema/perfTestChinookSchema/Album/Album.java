package com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Album;

import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Artist.Artist;
import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Track.Track;
import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.ComparableForeignKeyField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.ComparableForeignKeyFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table
 * 'perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Album'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface Album extends Entity<Album> {
    
    /**
     * This Field corresponds to the {@link Album} field that can be obtained
     * using the {@link Album#getAlbumId()} method.
     */
    public final static ComparableField<Album, Integer> ALBUMID = new ComparableFieldImpl<>("AlbumId", Album::getAlbumId, Album::setAlbumId);
    /**
     * This Field corresponds to the {@link Album} field that can be obtained
     * using the {@link Album#getTitle()} method.
     */
    public final static StringField<Album> TITLE = new StringFieldImpl<>("Title", Album::getTitle, Album::setTitle);
    /**
     * This Field corresponds to the {@link Album} field that can be obtained
     * using the {@link Album#getArtistId()} method.
     */
    public final static ComparableForeignKeyField<Album, Integer, Artist> ARTISTID = new ComparableForeignKeyFieldImpl<>("ArtistId", Album::getArtistId, Album::setArtistId, Album::findArtistId);
    
    /**
     * Returns the albumId of this Album. The albumId field corresponds to the
     * database column perfTestChinookSchema.perfTestChinookSchema.Album.AlbumId.
     * 
     * @return the albumId of this Album
     */
    Integer getAlbumId();
    
    /**
     * Returns the title of this Album. The title field corresponds to the
     * database column perfTestChinookSchema.perfTestChinookSchema.Album.Title.
     * 
     * @return the title of this Album
     */
    String getTitle();
    
    /**
     * Returns the artistId of this Album. The artistId field corresponds to the
     * database column
     * perfTestChinookSchema.perfTestChinookSchema.Album.ArtistId.
     * 
     * @return the artistId of this Album
     */
    Integer getArtistId();
    
    /**
     * Sets the albumId of this Album. The albumId field corresponds to the
     * database column perfTestChinookSchema.perfTestChinookSchema.Album.AlbumId.
     * 
     * @param albumId to set of this Album
     * @return this Album instance
     */
    Album setAlbumId(Integer albumId);
    
    /**
     * Sets the title of this Album. The title field corresponds to the database
     * column perfTestChinookSchema.perfTestChinookSchema.Album.Title.
     * 
     * @param title to set of this Album
     * @return this Album instance
     */
    Album setTitle(String title);
    
    /**
     * Sets the artistId of this Album. The artistId field corresponds to the
     * database column
     * perfTestChinookSchema.perfTestChinookSchema.Album.ArtistId.
     * 
     * @param artistId to set of this Album
     * @return this Album instance
     */
    Album setArtistId(Integer artistId);
    
    /**
     * Finds and returns the foreign key Entity {@link Artist} referenced by the
     * field that can be obtained using {@link Album#getArtistId()}.<p> N.B. The
     * current implementation only supports lazy-loading of the referenced
     * Entities. This means that if you traverse N Album entities and call this
     * method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Artist} referenced by the field that
     * can be obtained using {@link Album#getArtistId()}
     */
    Artist findArtistId();
    
    /**
     * Creates and returns a {@link Stream} of all {@link Track} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Track#getAlbumId()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Track} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Track#getAlbumId()}
     */
    Stream<Track> findTracksByAlbumId();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Track} Entities that references this Entity by a foreign key. The order of
     * the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Track} Entities
     * that references this Entity by a foreign key
     */
    Stream<Track> findTracks();
}