package com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Album.impl;

import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Album.Album;
import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Artist.Artist;
import com.mooneyserver.jdbc_perf.speedment.generated.perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Track.Track;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An implementation representing an entity (for example, a row) in the Table
 * 'perfTestChinookSchema.perfTestChinookSchema.perfTestChinookSchema.Album'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class AlbumImpl extends AbstractBaseEntity<Album> implements Album {
    
    private Integer albumId;
    private String title;
    private Integer artistId;
    
    AlbumImpl(Speedment speedment) {
        super(speedment);
    }
    
    public AlbumImpl(Speedment speedment, final Album album) {
        super(speedment);
        setAlbumId(album.getAlbumId());
        setTitle(album.getTitle());
        setArtistId(album.getArtistId());
    }
    
    @Override
    public Integer getAlbumId() {
        return albumId;
    }
    
    @Override
    public String getTitle() {
        return title;
    }
    
    @Override
    public Integer getArtistId() {
        return artistId;
    }
    
    @Override
    public final AlbumImpl setAlbumId(Integer albumId) {
        this.albumId = albumId;
        return this;
    }
    
    @Override
    public final AlbumImpl setTitle(String title) {
        this.title = title;
        return this;
    }
    
    @Override
    public final AlbumImpl setArtistId(Integer artistId) {
        this.artistId = artistId;
        return this;
    }
    
    @Override
    public Artist findArtistId() {
        return managerOf_(Artist.class).stream()
            .filter(Artist.ARTISTID.equal(getArtistId()))
            .findAny().orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Artist is set to " + getArtistId()
                ));
            
    }
    
    @Override
    public Stream<Track> findTracksByAlbumId() {
        return managerOf_(Track.class)
                .stream().filter(Track.ALBUMID.equal(this.getAlbumId()));
    }
    
    @Override
    public Stream<Track> findTracks() {
        return findTracksByAlbumId();
    }
    
    @Override
    public Album copy() {
        return new AlbumImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("albumId = "+Objects.toString(getAlbumId()));
        sj.add("title = "+Objects.toString(getTitle()));
        sj.add("artistId = "+Objects.toString(getArtistId()));
        return "AlbumImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Album)) { return false; }
        @SuppressWarnings("unchecked")
        final Album thatAlbum = (Album)that;
        if (!Objects.equals(this.getAlbumId(), thatAlbum.getAlbumId())) {return false; }
        if (!Objects.equals(this.getTitle(), thatAlbum.getTitle())) {return false; }
        if (!Objects.equals(this.getArtistId(), thatAlbum.getArtistId())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getAlbumId());
        hash = 31 * hash + Objects.hashCode(getTitle());
        hash = 31 * hash + Objects.hashCode(getArtistId());
        return hash;
    }
    
    @Override
    public Class<Album> getEntityClass_() {
        return Album.class;
    }
}